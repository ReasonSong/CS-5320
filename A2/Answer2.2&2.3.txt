2.2 The Cost of Joins

(a) cost of scanning R + 
    cost of index access tuples in R + 
    cost of retrieving page of qualifying tuples
    = N Pages(R) + 6 * N Tuples(R) + N Tuples(R) I/Os
    = N Pages(R) + 7 * N Tuples(R) I/Os

(b) cost of scanning S + 
    cost of index access for each tuple in S + 
    cost of retrieving matching tuples in R
    = N Pages(S) + 6 * N Tuples(S) + [N Tuples(R) / N Tuples(s)] * N Tuples(s) I/Os
    = N Pages(s) + N Tuples(s) * (6 + [N Tuples(R) / N Tuples(s)]) I/Os

(c) cost of scanning R + 
    cost of index access tuples in R + 
    cost of retrieving page with matching tuples in S
    = N Pages(R) + 1.5 * N Tuples(R) + N Tuples(R) I/Os
    = N Pages(R) + 2.5 * N Tuples(R) I/Os 

(d) cost of sorting R + cost of sorting S + cost of scanning R and S
    = 6 * N Pages(R) + 6 * N Pages(S) + [N Pages(R) + N Pages(S)] I/Os
    = 7 * (N Pages(R) + N Pages(S)) I/Os


2.3 Least Expensive Evaluation

(a)

[i] age > 10
    The most selective method is to traverse all the data, 
    because age uses unclustered B+ tree index,
    which is unordered for the data age,
    and the indexes are not useful to find all the tuples satisfy age > 10.

    cost = 56000

[ii] location = “CA”
     The most selective method is using clustered B+ tree index on <location,age>,
     because clustered B+ tree index has better performance to find data than 
     unclustered hash index in this case.
     
     cost = 2 + 56000 pages * (20 bytes / 120 bytes) * 0.1 + 56000 pages * 0.1
          = 6535.33
          = 6536

[iii] location = “NY” AND age > 5 AND toy_preference = “Yarn Ball”
      The most selective method is using clustered B+ tree index on <location,age>

      cost = 2 + 56000 pages * (20 bytes / 120 bytes) * 0.1 + 56000 pages * 0.1
           = 6535.33
           = 6536


(b)

[i] age > 10
    scan the file
    cost = 56000

[ii] location = “CA”
     Using clustered B+ Tree index <location,age>.
     cost = 2 + 56000 pages * (20 bytes / 120 bytes) * 0.1
         = 935.33
         = 936

[iii] location = “NY” AND age > 5 AND toy_preference = “Yarn Ball”
      Using clustered B+ Tree index <location,age>.
      cost = 2 + 56000 pages * (20 bytes / 120 bytes) * 0.1
         = 935.33
         = 936